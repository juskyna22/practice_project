Task 6: Deploy as web application using Flask
Now that the application is ready, it is time to deploy it for usage over a web interface. To ease the process of deployment, you have been provided with 
3 files which are going to be used for this task.

1. index.html in templates folder.

This file has the code for the web interface that has been designed for this lab. This is being provided for you in completion and is to be used as is. You are not required to make any changes to this file.

The interface is as shown in the image.


2. mywebscript.js in static folder.
Clicking the Run Sentiment Analysis button, on the html interface, calls this javascript file which executes a GET request and takes the text provided by the user as input. This text, saved in a variable named textToAnalyze is then passed on to the server file to be sent to the application. This file is also being provided to you in completion and is expectedc to be used as is. You are not required to make any changes to this file.

3.  server.py in the practice_project folder.
This task revolves around the completion of this file. You can complete this file by completing the following 5 steps.

a. Import the relevant libraries and functions

In this file, you'll need the Flask library along with its render_template function (for deploying the HTML file) and request function (to initiate the GET request from the web page).

You also would need to import the sentiment_analyzer function from the SentimentAnalysis package.

Add the relevant lines of code, importing the said functions, in server.py

Click here for solution
1    from flask import Flask, render_template, request
2    from SentimentAnalysis.sentiment_analysis import sentiment_analyzer

b. Initiate the Flask app by the name Sentiment Analyzer

Put the knowledge gained in Module 2 of this course and add the statement to server.py, that initiates the application and names it Sentiment Analyzer.

Click here for solution
1    app = Flask("Sentiment Analyzer")

c. Define the function sent_analyzer

The purpose of this function is two fold. First, the function should send a GET request to the HTML interface to receive the input text. Note that the GET request should reference 

textToAnalyze variable as defined in the 
mywebscript.js file. Store the incoming text to a variable 
text_to_analyze. Now, as the second function, call your 
sentiment_analyzer application with 
text_to_analyze as the argument.

Also, format the returning output of the function in a formal text. For e.g.
The given text has been identified as POSITIVE with a score of 0.99765.

Click here for hint

Use request.args.get to initiate the GET request.
The label, received as "SENT_CLASS" (where class can be POSITIVE, NEGATIVE or NEUTRAL), will have to be split on ‘_’ to access the class name individually.

Click here for solution
1    @app.route("/sentimentAnalyzer")
2     def sent_analyzer():
3        text_to_analyze = request.args.get('textToAnalyze')
4        response = sentiment_analyzer(text_to_analyze)
5        label = response['label']
6        score = response['score']
7        return "The given text has been identified as {} with a score of {}.".format(label.split('_')[1], score)

Note: The function uses the Flask decorator 

@app.route("/sentimentAnalyzer") as referenced in the 
mywebscript.js file.

d. Render the HTML template using render_index_page

This function should simply run the render_template function on the HTML template, index.html.

Click here for solution
1    @app.route("/")
2    def render_index_page():
3       return render_template('index.html')

e. *Run the application on localhost:5000 *

Finally, upon file execution, run the application on host: 0.0.0.0 (or localhost) on port number 5000.

Click here for solution

1    if __name__ == "__main__":
2        app.run(host="0.0.0.0", port=5000)

To deploy the application, exectue the file server.py from the terminal.

1    python3.11 server.py

The output would look like this.


The app is now running on localhost:5000. To access the application, go to the Skills Network Toolbox tab and click on Launch Application. Enter the Appplication port as 5000, and click on Your Application.


The application interface will open. Use the interface to test your application.


To stop the application, press Ctrl+C.
