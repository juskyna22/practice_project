Task 2: Create a sentiment analysis application using Watson NLP library
NLP sentiment analysis is the practice of using computers to recognize sentiment or emotion expressed in a text. Through NLP, sentiment analysis categorizes words as positive, negative or neutral.

Sentiment analysis is often performed on textual data to help businesses monitor brand and product sentiment in customer feedback, and understanding customer needs. It helps attain the attitude and mood of 
the wider public which can then help gather insightful information about the context.

For creating the sentiment analysis application, we'll be making use of the Watson Embedded AI Libraries. Since the functions of these libraries are already deployed on the Cloud IDE server, 
there is no need of importing these libraries to our code. Instead, we need to send a POST request to the relevant model with the required text and the model will send the appropriate response.

A sample code for such an application could be

1    import requests

2    def <function_name>(<input_args>):
    url = '<relevant_url>'
    headers = {<header_dictionary>}
    myobj = {<input_dictionary_to_the_function>}
    response = requests.post(url, json = myobj, headers=header)
    return response.text
3       url = '<relevant_url>'
4        headers = {<header_dictionary>}
5       myobj = {<input_dictionary_to_the_function>}
6       response = requests.post(url, json = myobj, headers=header)
7       return response.text

Note: The response of the Watson NLP functions is in the form of an object. For accessing the details of the response, we can use text attribute of the object by calling response.text and make the function return the 
response as simple text.

For this project, you'll be using the BERT based Sentiment Analysis function of the Watson NLP Library. For accessing this funciton, the URL, the headers and the input json format is as follows.


1  URL: 'https://sn-watson-sentiment-bert.labs.skills.network/v1/watson.runtime.nlp.v1/NlpService/SentimentPredict'
2  Headers: {"grpc-metadata-mm-model-id": "sentiment_aggregated-bert-workflow_lang_multi_stock"}
3  Input json: { "raw_document": { "text": text_to_analyse } }

Here, text_to_analyze is being used as a variable that holds the actual written text which is to be analyzed.

In this task, you need to create a file named sentiment_analysis.py in practice_project folder. In this file, write the function for running sentiment analysis using the Watson NLP BERT Seniment Analysis function, as discussed above. 
Let us call this function setiment_analyzer. Assume that that text to be analysed is passed to the function as an argument and is stored in the variable text_to_analyse.

Click here for the solution

sentiment_analysis.py

1    import requests
2    def sentiment_analyzer(text_to_analyse):
3       url = 'https://sn-watson-sentiment-bert.labs.skills.network/v1/watson.runtime.nlp.v1/NlpService/SentimentPredict'
4        myobj = { "raw_document": { "text": text_to_analyse } }
5        header = {"grpc-metadata-mm-model-id": "sentiment_aggregated-bert-workflow_lang_multi_stock"}
6        response = requests.post(url, json = myobj, headers=header)
7        return response.text

This application can now be called using Python shell. To test the application, open a Python shell in the terminal with the following command. Make sure that the current directory is practice_project.

1   python3.11

In the python shell, import the function sentiment_analyzer.

Click here for hint

Syntax:
1  from file_name import function_name


Click here for solution

1    from sentiment_analysis import sentiment_analyzer

After successful import, test your application with the text “I love this new technology.” The result expected is as shown in the image below. To exit the python shell, press Ctrl+Z or type exit().


This completes the Task 2. Note that in the output, the information relevant to us is only the label and the score. In the following task, you will extract this informtion from this output.
